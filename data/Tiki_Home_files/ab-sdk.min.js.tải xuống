window.ABTest = (() => {
  let t = null,
    e = !1;
  const o = 'AB_TEST',
    n = 'AB_TEST_WILL_APPLY';
  let a = { status: '', data: {} },
    i = {};
  return {
    init: async function({ timeout: c = 1000 } = {}, s = () => {}) {
      !(function() {
        try {
          const t = localStorage.getItem(o),
            e = JSON.parse(t) || {},
            a = localStorage.getItem(n),
            i = JSON.parse(a) || {};
          !(function(t) {
            for (var e in t) if (t.hasOwnProperty(e)) return !1;
            return JSON.stringify(t) === JSON.stringify({});
          })(i) && JSON.stringify(e.data) !== JSON.stringify(i)
            ? ((e.status = 'pending'),
              (e.data = i),
              localStorage.setItem(o, JSON.stringify(e)),
              localStorage.removeItem(n))
            : localStorage.removeItem(n);
        } catch (t) {
          console.log('_syncLocalStore', t);
        }
      })(),
        document?.documentElement?.classList?.add('tiki-sync-hide'),
        (t = setTimeout(() => {
          console.log('timout fail'), (e = !0), 'function' == typeof s && s(!1);
        }, c)),
        (i = await (async function() {
          try {
            const t = (function(t) {
                const e = document.cookie.split(';');
                for (let t = 0; t < e.length; t++) {
                  const o = e[t].split('=');
                  if ('_trackity' == o[0].trim()) return decodeURIComponent(o[1]);
                }
                return null;
              })(),
              e = await fetch('https://api.tiki.vn/spectrum/v2/enrolls', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ trackity_id: t })
              });
            return e.ok ? await e.json() : (console.log('_fetchData fail'), null);
          } catch (t) {
            return console.log('_fetchData==>', t), null;
          }
        })()),
        i &&
          (t && clearTimeout(t),
          e
            ? (function(t) {
                try {
                  t && localStorage.setItem(n, JSON.stringify(t));
                } catch (t) {
                  console.log('_storeDataForNextTime==>', t);
                }
              })(i)
            : ((function(t) {
                try {
                  const e = localStorage.getItem(o),
                    n = JSON.parse(e) || {};
                  t &&
                    ((e && JSON.stringify(n.data) === JSON.stringify(t)) ||
                      ((a.status = 'pending'),
                      (a.data = t),
                      localStorage.setItem(o, JSON.stringify(a))));
                } catch (t) {
                  console.log('_validateLocalStore==>', t);
                }
              })(i),
              'function' == typeof s && s(!0),
              console.log('timout success'))),
        document?.documentElement?.classList?.remove('tiki-sync-hide');
    },
    getConfig: function() {
      try {
        const t = localStorage.getItem(o);
        return JSON.parse(t) || {};
      } catch (t) {
        console.log(t);
      }
    },
    activated: function(t = {}) {
      try {
        if (window.trackity) {
          const {
            created_at: e = +new Date(),
            client_id: n = '',
            details: a = { exp_id: '', variant_id: '', remote_configs: [] }
          } = t;
          window.trackity.push({
            action_name: 'experiment_activated',
            client_id: n,
            details: a,
            created_at: e
          });
          const i = localStorage.getItem(o),
            c = JSON.parse(i) || {};
          (c.status = 'activated'), localStorage.setItem(o, JSON.stringify(c));
        }
      } catch (t) {
        console.log('activated==>', t);
      }
    }
  };
})();
